name: Build and Deploy (Railway - Node/Express)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: node-src
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests (optional)
        run: |
          if [ -f package.json ] && jq -e '.scripts.test' package.json >/dev/null; then
            npm test --if-present
          else
            echo "No test script; skipping."
          fi

      - name: Build (if applicable)
        run: npm run build --if-present

      - name: Archive source (tracked files only)
        shell: bash
        run: |
          git ls-files -z | tar --null -T - -czf node-src.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-src
          path: node-src.tar.gz
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-src
          path: build

      - name: Extract artifact
        run: |
          tar -xzf build/node-src.tar.gz -C build
          rm build/node-src.tar.gz

      - name: Install Railway CLI
        #run: npm i -g @railway/cli@3.18.0
        run: npm i -g railway

      - name: Install jq (for JSON parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Ensure service exists & deploy
        working-directory: build
        env:
          # IMPORTANT: this must be a **Project Token** scoped to the target environment
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          # Optional: override service name via repo variable; defaults to "server"
          R_SERVICE: ${{ vars.RAILWAY_SERVICE }}
        run: |
          set -euo pipefail
          SERVICE_NAME="${R_SERVICE:-server}"

          echo "Listing services in token-bound project/environment…"
          if ! railway service list --json | jq -e --arg n "$SERVICE_NAME" '.services[] | select(.name==$n)' >/dev/null; then
            echo "Service '$SERVICE_NAME' not found — creating it…"
            railway service create "$SERVICE_NAME"
          else
            echo "Service '$SERVICE_NAME' exists."
          fi

          echo "Deploying to service: $SERVICE_NAME"
          railway up --service "$SERVICE_NAME" --yes