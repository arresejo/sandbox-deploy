name: Build and Deploy (Railway - Node/Express)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: node-src
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      # If you don't have a lockfile, either add one or switch to `npm install`.
      - name: Install dependencies
        run: npm ci

      - name: Run tests (optional)
        run: |
          if [ -f package.json ] && jq -e '.scripts.test' package.json >/dev/null; then
            npm test --if-present
          else
            echo "No test script; skipping."
          fi

      - name: Build (if applicable)
        run: npm run build --if-present

      - name: Archive source (tracked files only)
        shell: bash
        run: |
          git ls-files -z | tar --null -T - -czf node-src.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-src
          path: node-src.tar.gz
          retention-days: 1

deploy:
  needs: build
  runs-on: ubuntu-latest
  steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: node-src
        path: build

    - name: Extract artifact
      run: |
        tar -xzf build/node-src.tar.gz -C build
        rm build/node-src.tar.gz

    - name: Install Railway CLI
      run: npm i -g @railway/cli@3.18.0

    - name: Deploy to Railway (no link; explicit project/service)
      working-directory: build
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}    # MUST be an Account/User token
        RAILWAY_ENV: ${{ vars.RAILWAY_ENV }}           # optional, e.g. "production"
        R_SERVICE: ${{ vars.RAILWAY_SERVICE }}         # optional override; defaults to "server"
      run: |
        set -euo pipefail
        PROJECT_ID="8973cade-aa26-4ab9-afb1-f6c8ba00df04"
        SERVICE_NAME="${R_SERVICE:-server}"

        # (Optional) select environment if provided
        ENV_FLAG=""
        if [ -n "${RAILWAY_ENV:-}" ]; then
          ENV_FLAG="--environment ${RAILWAY_ENV}"
        fi

        echo "Ensuring service '${SERVICE_NAME}' exists in project ${PROJECT_ID}…"
        if ! railway service list --project "$PROJECT_ID" --json | jq -e --arg n "$SERVICE_NAME" '.services[] | select(.name==$n)' >/dev/null; then
          railway service create "$SERVICE_NAME" --project "$PROJECT_ID"
        fi

        echo "Deploying to project=${PROJECT_ID} service=${SERVICE_NAME}…"
        railway up --project "$PROJECT_ID" --service "$SERVICE_NAME" $ENV_FLAG --yes

        echo "Deployment complete."